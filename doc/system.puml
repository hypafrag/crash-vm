@startuml simple_architecture
title CrashVM simple architecture

map CPU {
}
map RAM {
}

CPU - RAM

CPU : IA => 0x0000 - 0xffff
CPU : OC => 0x0000 - 0xffff
CPU : A0 => 0x0000 - 0xffff
CPU : AC => 0x0000 - 0xffff

RAM : 0x0000 => 0x0000 - 0xffff
RAM : 0x0001 => 0x0000 - 0xffff
RAM : 0x0002 => 0x0000 - 0xffff
RAM : ... *->
RAM : 0x00ff => 0x0000 - 0xffff

@enduml

@startuml calling_convention

participant Caller
participant Stack
participant Callee
participant CPU

activate Caller
Caller -> Stack: Push return address
Caller -> Stack: Push Arg[ArgN]
...
Caller -> Stack: Push Arg[1]
Caller -> Stack: Push Arg[0]
Caller -> CPU: Jump to function start
deactivate Caller

activate Callee
Callee -> Callee: Do stuff
...
Callee -> Stack: Push Ret[RetN]
...
Callee -> Stack: Push Ret[1]
Callee -> Stack: Push Ret[0]
Callee -> CPU: Jump to return address
deactivate Callee

activate Caller
Caller -> Stack: Fetch returned values
Caller -> Stack: Pop ArgN + RetN + 1\nvalues
...

@enduml

@startuml advanced_architecture
title CrashVM advanced architecture

map "OM Flags" as OMF {
    0x0 => A0 type\n0 - Address (RAM/stack)\n1 - Literal
    0x1 => A0 value type\n0 - Value\n1 - Pointer
    0x2 => Addressing mode\n0 - RAM address\n1 - Stack offset
    0x3 - 0xf => Not used, always 0
}

map CPU {
    IA => Instruction address\n0x0000 - 0xffff
    OC => Operation code\n0x0000 - 0xffff
    OM *-> OMF
    OM => Operation mode\n16 flags
    A0 => Operation argument\n0x0000 - 0xffff
    AC => Accumulator\n0x0000 - 0xffff
    SP => Stack pointer\n0x0000 - 0xffff
    HI => Hardware interrupt\nhandlers table address\n0x0000 - 0xffff
    SI => Software interrupt\nhandlers table address\n0x0000 - 0xffff
    IL => Current executed\ninterrupt level + 1\n(0 - no interrupt\nhandler executed)\n0x0000 - 0xffff
}

map Bridge {
}

map RAM {
    0x0000 => 0x0000 - 0xffff
    0x0001 => 0x0000 - 0xffff
    0x0002 => 0x0000 - 0xffff
    ... => ...
    0xfeff => 0x0000 - 0xffff
}

map Ports {
    0xff00 => 0x0000 - 0xffff
    0xff01 => 0x0000 - 0xffff
    0xff02 => 0x0000 - 0xffff
    ... => ...
    0xffff => 0x0000 - 0xffff
}

CPU -- Bridge: FSB
Bridge -- RAM
Bridge -- Ports

@enduml

@startuml simple_cycle
title CrashVM simple cycle

participant RAM
participant OC
participant A0
participant IA
participant CPU

==Fetch opcode==
RAM -> OC: OC = RAM[IA]
IA -> IA: IA += 1
==Decode opcode==
opt OC contains unknown opcode
    CPU -> CPU: InvalidInstruction interrupt
end
opt Argument required for fetched operation
    ==Fetch argument==
    RAM -> A0: A0 = RAM[IA]
    IA -> IA: IA += 1
end
==Execute==
CPU -> CPU: Execute instruction\n(see "CrashVM instructions")
alt Int 0 raised
    CPU -> CPU: Stop cycling
else
    CPU -> CPU: Back to "Fetch opcode"
end

@enduml

@startuml advanced_cycle
title CrashVM advanced cycle

participant FSB
participant OC
participant A0
participant IA
participant CPU

==Fetch opcode==
FSB -> OC: OC = FSB[IA]
IA -> IA: IA += 1
==Decode opcode==
opt OC contains unknown opcode
CPU -> CPU: InvalidInstruction interrupt
end
opt Argument required for fetched operation
    ==Fetch argument==
    FSB -> A0: A0 = FSB[IA]
    IA -> IA: IA += 1
    opt Argument has type other then `value`
        opt OM[2] == 1
            A0 -> A0: A0 = SP - A0 - 1
        end
        opt Argument has type `value address`
            opt OM[0] == 0
                ==Fetch argument value==
                FSB -> A0: A0 = FSB[A0]
            end
        end
        opt OM[1] == 1
            ==Resolve argument value as pointer==
            FSB -> A0: A0 = FSB[A0]
        end
    end
end
==Execute==
CPU -> CPU: Execute instruction\n(see "CrashVM instructions")
alt Int 0 raised
    CPU -> CPU: Stop cycling
else
    CPU -> CPU: Back to "Fetch opcode"
end

@enduml

@startuml simple_instructions
title CrashVM simple instructions set

participant RAM
participant AC
participant IA
participant CPU

==Int (OC == 0x00)==
A0 -> CPU: Software interrupt\nwith code A0

==Ld (OC == 0x01)==
RAM -> AC: AC = RAM[A0]
==St (OC == 0x02)==
RAM <- AC: RAM[A0] = AC

==Add (OC == 0x03)==
RAM -> AC: AC += RAM[A0]
==Neg (OC == 0x04)==
AC -> AC: AC = -AC

==Mul (OC == 0x05)==
RAM -> AC: AC *= RAM[A0]
==Div (OC == 0x06)==
RAM -> AC: AC /= RAM[A0]

==Gt (OC == 0x08)==
alt AC > RAM[A0]
    RAM -> AC: AC = 1
else
    RAM -> AC: AC = 0
end

==Not (OC == 0x09)==
alt AC == 0
    AC -> AC: AC = 1
else
    AC -> AC: AC = 0
end
==And (OC == 0x0a)==
alt AC and RAM[A0]
    RAM -> AC: AC = 1
else
    RAM -> AC: AC = 0
end
==Or (OC == 0x0b)==
alt AC or RAM[A0]
    RAM -> AC: AC = 1
else
    RAM -> AC: AC = 0
end

==Jmp (OC == 0x0c)==
RAM -> IA: IA = A0
==Jif (OC == 0x0d)==
opt AC != 0
    RAM -> IA: IA = A0
end

==Noop (OC == 0xff)==

@enduml

@startuml advanced_instructions
title CrashVM advanced instructions set

participant FSB
participant A0
participant AC
participant SP
participant IA
participant OM

==A0A (OC == 0x10)==
OM -> OM: OM[0] = 0
==A0L (OC == 0x11)==
OM -> OM: OM[0] = 1
==A0V (OC == 0x10)==
OM -> OM: OM[1] = 0
==A0P (OC == 0x11)==
OM -> OM: OM[1] = 1
==A0R (OC == 0x12)==
OM -> OM: OM[2] = 0
==A0S (OC == 0x13)==
OM -> OM: OM[2] = 1

==Stk (OC == 0x70)==
A0 -> SP: SP = A0

==Push (OC == 0x71)==
FSB <- AC: FSB[SP] = AC
SP -> SP: SP += 1
==Pop (OC == 0x72)==
SP -> SP: SP -= A0

@enduml
